:PROPERTIES:
:ID:       b9359672-0126-4fcd-a3bf-8b0c0dcd4d73
:END:
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+TITLE: Emacs Configuration
* Extra Functionality
:PROPERTIES:
:ID:       2dc993e7-cb89-4ba8-a418-b51464807b6e
:END:

** op commandline integration
:PROPERTIES:
:ID:       77e5b779-e31e-4b1c-a864-76f2c4c1a8d0
:END:

#+begin_src emacs-lisp
(require 'auth-source)

(defgroup auth-source-op nil
  "op (1password command line tool) auth source."
  :group 'auth-source
  :tag "auth-source-op"
  :prefix "op-")

(defcustom auth-source-op-executable "op"
  "op executable to use."
  :type 'string
  :group 'auth-source-op)

(cl-defun auth-source-op-search (&rest spec
                                       &key _backend _type host _user _port
                                       &allow-other-keys)
  "query 1password using the op command"
  (if (executable-find auth-source-op-executable)
      ;; TODO: handle errors :P
      (let* ((op-result (string-trim
			 (shell-command-to-string
			  (format "%s item get %s --fields label=username,label=password --reveal --format json"
				  auth-source-op-executable
				  host))))
	     (result (json-parse-string op-result :object-type 'alist :array-type 'list))
	     (user (cdr (assoc 'value (nth 0 result))))
	     (secret (cdr (assoc 'value (nth 1 result)))))
	(list (list :user user
		    :secret secret)))
    (warn "`auth-source-op': Couldn't find 'op' executable")))

(defun auth-source-op-enable ()
  "Enable the op auth source."
  (add-to-list 'auth-sources 'op)
  (auth-source-forget-all-cached))

(defvar auth-source-op-backend
  (auth-source-backend
   :source "."
   :type 'password-store
   :search-function #'auth-source-op-search))

(defun auth-source-op-backend-parse (entry)
  (when (eq entry 'op)
    (auth-source-backend-parse-parameters entry auth-source-op-backend)))

(if (boundp 'auth-source-backend-parser-functions)
    (add-hook 'auth-source-backend-parser-functions #'auth-source-op-backend-parse)
  (advice-add 'auth-source-backend-parse :before-until #'auth-source-op-backend-parse))

(provide 'auth-source-op)
#+end_src

* Literate emacs configuration
:PROPERTIES:
:ID:       63e8f578-4726-47ea-84ee-31146bad6fd2
:END:

I can never rembember what various configs do. Jumping on this literate emacs
config to see if it helps!

** Instance Specific
:PROPERTIES:
:ID:       2b0c380e-411a-4c7a-b4a9-892b0f5f3742
:END:

Sometimes I need to execute some other things on different machines. This lets
me include an extra file to extend things a bit.

#+begin_src emacs-lisp
  (if (file-exists-p "~/.emacs.d/xin-custom.el")
      (progn
        (load "~/.emacs.d/xin-custom.el")))
#+end_src

** Start the emacs server
:PROPERTIES:
:ID:       fd3e2824-e62c-4812-9919-6b7ed9af0942
:END:

Starting as a server lets me connect externally to do things like change
themes, save buffers via cron and other such dumbary!

#+begin_src emacs-lisp
(require 'bind-key)
(load "server")
(unless (server-running-p) (server-start))
#+end_src

** Interface and Behavior
:PROPERTIES:
:ID:       c3ba44d8-5c91-454f-98bf-803290f5e2a1
:END:
*** Interface
:PROPERTIES:
:ID:       7ba540d9-275f-4267-9d86-46db134d2c01
:END:

Global font
#+begin_src emacs-lisp
  (set-frame-font "Go Mono 11")
#+end_src

Use 80 columns, this helps keep things readable when windows are split
#+begin_src emacs-lisp
(setq whitespace-style '(trailing lines space-before-tab)
      whitespace-line-column 80)
(setq-default fill-column 80)
#+end_src

I know I am in emacs, don't need to see the startup screen.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

**** Use UTF8 where ever possible
:PROPERTIES:
:ID:       84a57366-d670-4656-a65b-bb65d0aafd4c
:END:
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

**** Change various UI bits
:PROPERTIES:
:ID:       87e81f85-c239-4381-ba8f-36fbeba9f32f
:END:
#+begin_src emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(column-number-mode +1)
(global-font-lock-mode 1)
#+end_src

**** direnv
:PROPERTIES:
:ID:       dfde4ab6-2bfd-4fa1-8e2f-f943dce10c0e
:END:

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

**** project.el
:PROPERTIES:
:ID:       194d6c86-cb31-4563-820c-efbf72853313
:END:

#+begin_src emacs-lisp
  (setq project-list-file (expand-file-name "~/.emacs.d/projects"))
#+end_src

**** transient
:PROPERTIES:
:ID:       fff55527-096f-41bd-8aa2-535c089aa06d
:END:

#+begin_src emacs-lisp
  (setq transient-history-file (expand-file-name "~/.emacs.d/transient"))
#+end_src

**** eww
:PROPERTIES:
:ID:       7a31ea70-4a38-444f-9fbc-e72330d293a9
:END:

[2025-04-02 Wed] Since switching to rcirc and elfeed.. it's nice to be able to
view links directly in emacs. This sets the default to be eww.. I can use ~&~ to
open in the external browser.

#+begin_src emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src

**** scrolly scroll scroll
:PROPERTIES:
:ID:       2daea08b-1cba-4bc8-96ec-0c590f2cf690
:END:

#+begin_src emacs-lisp
  (pixel-scroll-precision-mode)
#+end_src


**** wayland copy / paste issues
:PROPERTIES:
:ID:       a17c42f7-e91c-4fb8-9491-88c97d55a0e1
:END:

[2025-04-18 Fri] it seems I have recently started having issues with wayland and
copy / paste. It works initially - but after some time the buffers diverge.

The [[https://www.emacswiki.org/emacs/CopyAndPaste#h5o-4][wiki]] has some info on using ~wl-clipboard~ to fix things.

[2025-08-12 Tue] Update to the what the latest wiki has.. if this doesn't work I
will try setting ~save-interprogram-paste-before-kill~.

#+begin_src emacs-lisp
  (setopt select-active-regions nil)
  (setopt select-enable-clipboard 't)
  (setopt select-enable-primary 't)
  (setopt interprogram-cut-function #'gui-select-text)
#+end_src

*** Common functionality
:PROPERTIES:
:ID:       837a6def-b743-40f0-8753-9b16bd8416d5
:END:

#+begin_src emacs-lisp
  (defun xin/no-check ()
    (interactive)
    (setenv "SKIP_CHECK" "1"))
#+end_src

*** Behavior
:PROPERTIES:
:ID:       9100298b-44d4-4ddc-9d32-b4ce3a04a134
:END:

Switch various defaults to be more comfortable for myself.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (show-paren-mode t)

  (setq desktop-dirname             "~/.emacs.d/"
        desktop-base-file-name      "emacs.desktop"
        desktop-base-lock-name      "lock"
        desktop-path                (list desktop-dirname)
        desktop-save                t
        desktop-files-not-to-save   "^$" ;reload tramp paths
        desktop-load-locked-desktop nil
        desktop-auto-save-timeout   30)
  (desktop-save-mode 1)

  (setq backup-directory-alist '(("." . "~/.emacs-saves")))
  (setq auto-mode-alist
        (append
         (list
          '("\\.gpg$" . sensitive-minor-mode)
          )
         auto-mode-alist))
  (setq auth-sources
        '("/run/secrets/netrc"))
#+end_src

Use spelling and auto-fill when we are in text mode.

#+begin_src emacs-lisp
(add-hook 'text-mode-hook (lambda ()
			    (auto-fill-mode 1)
			    (turn-on-flyspell)))
#+end_src

#+begin_src emacs-lisp
  (setq eshell-history-file-name (expand-file-name "~/.emacs.d/eshell/history"))
  (use-package eat
    :config
    (setq eat-kill-buffer-on-exit t)
    (add-hook 'eshell-load-hook #'eat-eshell-mode))
#+end_src
** Unset custom-file
:PROPERTIES:
:ID:       9f381acd-3889-4808-b1c3-96b502c5cfb5
:END:

The customization file mostly just causes churn in the SCM so we disable it
here.
#+begin_src emacs-lisp
(setq custom-file (make-temp-file ""))
#+end_src

* Packages
:PROPERTIES:
:ID:       ab08313d-8258-478b-ba7c-f131dc7f56a7
:END:

** package-lint
:PROPERTIES:
:ID:       774dca4a-5cb3-4264-806b-8e3fb3ac8671
:END:

#+begin_src emacs-lisp
  (use-package package-lint)
#+end_src

** ob-mermaid
:PROPERTIES:
:ID:       867fa1c6-ce4d-4f1e-a60d-4e99c885cd91
:END:

#+begin_src emacs-lisp
  (use-package ob-mermaid)
  (use-package mermaid-mode)
#+end_src

** yaml
:PROPERTIES:
:ID:       0ea42ef6-f505-4ec5-af59-db8556920f48
:END:

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** rust-mode
:PROPERTIES:
:ID:       002b3f67-4bbb-40c3-9bc3-1ca9c809b094
:END:
#+begin_src emacs-lisp
  (use-package rust-mode)
#+end_src

** uxntal
:PROPERTIES:
:ID:       05ac40fb-f95d-45d0-82b0-a94367653bd9
:END:

#+begin_src emacs-lisp
  (use-package uxntal-mode)
#+end_src

** breadcrumb
:PROPERTIES:
:ID:       a271e79c-010a-4418-a12d-e7d65c14e085
:END:

Handy breadcrumbs for seeing where things are in the LSP.

#+begin_src emacs-lisp
  (use-package breadcrumb)
#+end_src

** web-mode
:PROPERTIES:
:ID:       96f95d47-78fb-4fa2-88e1-c9e998b163c1
:END:

#+begin_src emacs-lisp
  (use-package web-mode
    :config
    (setq web-mode-markup-indent-offset 2)
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.ts?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode)))
#+end_src

** scpaste
:PROPERTIES:
:ID:       cb5d91f6-352e-48cf-8304-3cc47c857977
:END:

Post pastes to https://paste.suah.dev

#+begin_src emacs-lisp
  (use-package scpaste
    :config (setq scpaste-scp-destination "suah.dev:/var/www/paste"
  		scpaste-http-destination "https://paste.suah.dev"))
#+end_src

** htmlize
:PROPERTIES:
:ID:       0975c7dc-bdd1-4358-8a35-65ce1354b3f7
:END:

This is needed for publishing org stuff

#+begin_src emacs-lisp
  (use-package htmlize)
#+end_src

** parchment-theme
:PROPERTIES:
:ID:       75dc99d8-4790-47e2-8a91-7e497406de6c
:END:
This is a nice theme that resembles acme in plan9. Minimal.

#+begin_src emacs-lisp
(use-package parchment-theme
  :config (load-theme 'parchment t))
#+end_src

** ivy
:PROPERTIES:
:ID:       587ef327-b68d-423b-842c-3a14a12f07bf
:END:

~ivy~ is fantastic. It gives me nice visual search for buffers,
code.. etc. Combined with ~smex~ for sorting (shows last used things first) and
~counsel~ (extends ivy into various areas like the help stuff).

#+begin_src emacs-lisp
  (use-package counsel)
  (setq smex-save-file (expand-file-name "~/.emacs.d/smex.save"))
  (use-package smex)
  (use-package ivy
    :hook (after-init . ivy-mode)
    :bind
    ("C-s"     . swiper-isearch)
    ("M-x"     . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-x b"   . ivy-switch-buffer))
#+end_src

** magit
:PROPERTIES:
:ID:       87a444d1-b786-4e2d-8a9d-8e5e43c63206
:END:

Magit is a awesome. Not sure what else to say about it. :P

#+begin_src emacs-lisp
  (use-package magit
    :bind ("C-c m" . magit-status)
    :init
    (setq magit-completing-read-function 'ivy-completing-read))

  (use-package forge
    :after magit)
#+end_src

** lsp
:PROPERTIES:
:ID:       7619e01c-121b-497e-8b43-5f548626cfc6
:END:

Use ~eglot~ for lsp stuff. It's built in and shows a bit more information for
auto-completion stuff.

#+begin_src emacs-lisp
  (use-package paredit
    :hook ((scheme-mode
  	  elisp-mode
            geiser-repl-mode
        . paredit-mode)))
  (use-package eglot
    :config
    (add-hook 'elm-mode-hook 'eglot-ensure)
    (add-hook 'go-mode-hook 'eglot-ensure)
    (add-hook 'haskell-mode-hook 'eglot-ensure)
    (add-hook 'lua-mode 'eglot-ensure)
    (add-hook 'nix-mode-hook 'eglot-ensure)
    (add-hook 'perl-mode-hook 'eglot-ensure)
    (add-hook 'ruby-mode-hook 'eglot-ensure)
    (add-hook 'rust-mode-hook 'eglot-ensure)
    (add-hook 'typescript-mode-hook 'eglot-ensure)

    (add-to-list 'eglot-server-programs '(c-mode    . ("clangd")))
    (add-to-list 'eglot-server-programs '(c++-mode  . ("clangd")))
    (add-to-list 'eglot-server-programs '(rust-mode . ("rust-analyzer")))

    (define-key eglot-mode-map (kbd "C-c r") 'eglot-rename)
    (define-key eglot-mode-map (kbd "C-c f") 'eglot-format)

    :hook
    (eglot-managed-mode . (lambda()
  			  (add-hook 'before-save-hook 'eglot-format-buffer nil 'local)
  			  (flyspell-prog-mode))))
#+end_src

** company and friends
:PROPERTIES:
:ID:       7327dc57-0f1d-4cff-80c3-fac203aa2626
:END:

~company~ allows for auto-completion of various things. It can interface with ~lsp-mode~ to complete
things like Go.

#+begin_src emacs-lisp
(use-package company
  :config
  (setq company-tooltip-limit 20
	company-minimum-prefix-length 1
	company-idle-delay .3
	company-echo-delay 0)
  :hook (prog-mode . company-mode))
#+end_src

** gitgutter
:PROPERTIES:
:ID:       bd3213fa-acb4-49ef-8f8a-a7710ce4984a
:END:
This gives me a nice in-ui way to see modifications and what not.

#+begin_src emacs-lisp
  (use-package git-gutter
    :hook
    (after-init . global-git-gutter-mode)
    :config
    (global-set-key (kbd "C-x g r") 'git-gutter:revert-hunk)
    (global-set-key (kbd "C-x g p") 'git-gutter:previous-hunk)
    (global-set-key (kbd "C-x g n") 'git-gutter:next-hunk))
#+end_src

** shell
:PROPERTIES:
:ID:       45907b9c-125c-4c73-ac4c-2bb2c199a76a
:END:

I don't often use the shell from emacs, but when I do these bits make it
easier for me to treat it like a regular shell.

#+begin_src emacs-lisp
  ;; Kill terminal buffers on exit so I din't have to kill the buffer after I exit.
  (defadvice term-handle-exit
      (after term-kill-buffer-on-exit activate)
    (kill-buffer))
#+end_src


vterm is handy for running things that spit out a lot of escape codes (nom.. etc)
#+begin_src emacs-lisp
  (use-package vterm)
#+end_src

* Language Configurations
:PROPERTIES:
:ID:       4d31b983-3fd6-408f-9488-b2215c005c63
:END:

** Forth
:PROPERTIES:
:ID:       75ab5012-b901-43ca-aaac-421ff542763c
:END:

#+begin_src emacs-lisp
  (use-package forth-mode)
#+end_src

** Ada
:PROPERTIES:
:ID:       0847485a-c6a3-4098-b096-f2dab861a65b
:END:

#+begin_src emacs-lisp
  ;; (use-package ada-mode)
#+end_src

** Lua
:PROPERTIES:
:ID:       5bbf0216-a279-419d-a420-9131ed0d56f0
:END:

#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

** scheme
:PROPERTIES:
:ID:       92990292-8fce-4c3f-92f8-e48b43979cda
:END:

#+begin_src emacs-lisp
  (use-package geiser)
  (use-package geiser-guile)
  (use-package geiser-racket)
#+end_src

** OCaml
:PROPERTIES:
:ID:       d4bee8fb-db63-4ac9-91b7-ab8b3be5e57b
:END:

#+begin_src emacs-lisp
  (use-package ocamlformat
    :custom (ocamlformat-enable 'enable-outside-detected-project)
    :hook (before-save . ocamlformat-before-save))

  (use-package tuareg
     :mode ("\\.ml$" . tuareg-mode))

  (use-package merlin
    :config
    (add-hook 'tuareg-mode-hook #'merlin-mode))
#+end_src

** firewall stuff
:PROPERTIES:
:ID:       b9af3ace-8fef-4239-adc4-24dce2ea04b1
:END:

*** nftables
:PROPERTIES:
:ID:       7fce62a2-f105-46a6-a001-800e665abf4f
:END:

#+begin_src emacs-lisp
  (use-package nftables-mode)
#+end_src

** Shell
:PROPERTIES:
:ID:       a12d920c-d93a-4bee-a643-9e32d796134e
:END:

#+begin_src emacs-lisp
  (use-package shfmt)
  (add-hook 'sh-mode-hook 'shfmt-on-save-mode)
#+end_src

** Typescript
:PROPERTIES:
:ID:       bf197863-f739-4f67-80a3-e1e583ebb93d
:END:

#+begin_src emacs-lisp
  (use-package typescript-mode)
#+end_src

** Nix
:PROPERTIES:
:ID:       b2222546-8d4d-4e6b-8905-0988028e77c2
:END:

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

** Elm
:PROPERTIES:
:ID:       405c6f22-53fc-40c6-8513-334df1c16a39
:END:

#+begin_src emacs-lisp
  (use-package elm-mode)
#+end_src

** Haskell
:PROPERTIES:
:ID:       8e14edd0-7e70-42a2-b69c-ffe19a69930e
:END:

#+begin_src emacs-lisp
  (use-package haskell-mode)
#+end_src

** Go
:PROPERTIES:
:ID:       ff95f843-b8cd-4e07-985a-c2a4ee3896bb
:END:

*** go-add-tags
:PROPERTIES:
:ID:       3e152be1-4c73-4d67-a4ea-386ae537d3c4
:END:

This lets one select a ~struct~ or similar and auto add the ~`json:"NAME"`~ bits.

#+begin_src emacs-lisp
  (use-package go-add-tags)
#+end_src

*** go-mode
:PROPERTIES:
:ID:       72c1f87f-1c69-470f-b7a9-5a3642eaa4a2
:END:

This allows for things like ~gofmt~ and auto adding / removing of imports.

#+begin_src emacs-lisp
  (use-package go-mode
    :bind
    ("C-c t" . go-add-tags))
  (defun xin/eglot-organize-imports () (interactive)
         (eglot-code-actions nil nil "source.organizeImports" t))
  (defun xin/lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook 'xin/eglot-organize-imports nil t))
  (add-hook 'go-mode-hook #'xin/lsp-go-install-save-hooks)
#+end_src

*** go-eldoc
:PROPERTIES:
:ID:       88db5063-f22c-4b0d-b6e1-e1fb3c64bced
:END:

This extends eldoc to be able to speak Go - quite handy for quickly looking
up what things do.

#+begin_src emacs-lisp
(use-package go-eldoc
  :hook
  (go-mode . go-eldoc-setup))
#+end_src

* org-mode
:PROPERTIES:
:ID:       9609380e-e2d0-48f6-a240-f67acca87d15
:END:

Oh ~org-mode~. It's the reason I started using emacs.. and it's the reason I
can't quit!

** Config
:PROPERTIES:
:ID:       b8cfd8d3-1422-4cf8-b284-aea6ae701bdd
:END:
#+begin_src emacs-lisp
  (require 'org-crypt)
  (require 'org-id)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance '("crypt"))
  (setq org-crypt-key "35863350BFEAC101DB1A4AF01F81112D62A9ADCE")

  (defun xin/org-add-ids ()
    "Add ID properties to org files"
    (interactive)
    (org-map-entries 'org-id-get-create))

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((plantuml . t)
     (dot      . t)
     (shell    . t)
     (latex    . t)))
#+end_src
** Publish bits
:PROPERTIES:
:ID:       792ab95b-b796-4c25-a675-4845ffae1462
:END:

I publish some of my notes [[https://suah.dev/p][on suah.dev/p]]. Also some recipes.

#+begin_src emacs-lisp
  (setq org-export-with-broken-links t)

  (defun xin/exo-touch-and-publish (plist filename dir)
    (progn
      (set-file-times "~/org-roam/index.org")
      (org-html-publish-to-html plist filename dir)))

  (setq my-org-publish-alist
        '(("exo" :components ("org-roam" "org-roam-static" "org-roam-org"))
  	("bolddaemon" :components ("bolddaemon-web" "bolddaemon-static"))
  	("notes" :components ("org-notes" "notes-static" "notes-rss"))
  	("deftly" :components ("deftly-blog" "deftly-static"))
  	("ohmyksh" :components ("ohmy-web" "ohmy-static"))
  	("org-roam"
  	 :publishing-directory "/ssh:suah.dev:/var/www/exo.suah.dev/"
  	 :recursive t
  	 :html-link-home "http://exo.suah.dev/"
  	 :html-link-up "../"
  	 :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />"
  	 :publishing-function xin/exo-touch-and-publish
  	 :base-directory "~/org-roam")
  	("org-roam-org"
  	 :publishing-directory "/ssh:suah.dev:/var/www/exo.suah.dev/"
  	 :publishing-function org-org-publish-to-org
  	 :recursive t
  	 :base-directory "~/org-roam")
  	("org-roam-static"
  	 :base-directory "~/org-roam"
  	 :recursive t
  	 :publishing-directory "/rsync:suah.dev:/var/www/exo.suah.dev/"
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|svg"
  	 :publishing-function org-publish-attachment)
  	("org-roam-rss"
  	 :publishing-directory "/ssh:suah.dev:/var/www/exo.suah.dev/"
  	 :publishing-function org-rss-publish-to-rss
  	 :rss-extension "xml"
  	 :base-directory "~/org-roam")
  	("org-notes"
  	 :auto-preamble t
  	 :auto-sitemap t
  	 :headline-levels 4
  	 :publishing-directory "/ssh:suah.dev:/var/www/suah.dev/p/"
  	 :publishing-function org-html-publish-to-html
  	 :recursive t
  	 :section-numbers nil
  	 :html-head "<link rel=\"stylesheet\" href=\"https://suah.dev/p/css/stylesheet.css\" type=\"text/css\" />"
  	 :html-link-home "http://suah.dev/p/"
  	 :html-link-up "../"
  	 :style-include-default nil
  	 :sitemap-filename "index.org"
  	 :sitemap-title "Notes"
  	 :with-title t
  	 :author-info nil
  	 :creator-info nil
  	 :base-directory "~/org/notes")
  	("deftly-blog"
  	 :auto-preamble t
  	 :auto-sitemap t
  	 :headline-levels 1
  	 :publishing-directory "/ssh:suah.dev:/var/www/deftly.net/new/"
  	 :publishing-function org-html-publish-to-html
  	 :recursive t
  	 :section-numbers nil
  	 :html-head "<link rel=\"stylesheet\" href=\"https://deftly.net/new/css/stylesheet.css\" type=\"text/css\" />"
  	 :html-link-home "http://deftly.net/new"
  	 :html-link-up "../"
  	 :style-include-default nil
  	 :sitemap-title "Deftly.net"
  	 :with-title t
  	 :author-info t
  	 :creator-info nil
  	 :base-directory "~/org/deftly")
  	("ohmy-web"
  	 :auto-preamble t
  	 :auto-sitemap nil
  	 :headline-levels 2
  	 :publishing-directory "/ssh:suah.dev:/var/www/deftly.net/ohmyksh/"
  	 :publishing-function org-html-publish-to-html
  	 :recursive t
  	 :section-numbers nil
  	 :html-head "<link rel=\"stylesheet\" href=\"https://deftly.net/ohmyksh/css/stylesheet.css\" type=\"text/css\" />"
  	 :html-link-home "http://deftly.net/ohmyksh"
  	 :html-link-up "../"
  	 :style-include-default nil
  	 :with-title t
  	 :author-info t
  	 :creator-info nil
  	 :base-directory "~/src/ohmyksh")
  	("notes-static"
  	 :base-directory "~/org/notes"
  	 :publishing-directory "/ssh:suah.dev:/var/www/suah.dev/p/"
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|svg"
  	 :recursive t
  	 :publishing-function org-publish-attachment)
  	("deftly-static"
  	 :base-directory "~/org/deftly"
  	 :publishing-directory "/ssh:suah.dev:/var/www/deftly.net/new/"
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg"
  	 :recursive t
  	 :publishing-function org-publish-attachment)
  	("ohmy-static"
  	 :base-directory "~/src/ohmyksh"
  	 :publishing-directory "/ssh:suah.dev:/var/www/deftly.net/ohmyksh/"
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg"
  	 :recursive t
  	 :publishing-function org-publish-attachment)
  	("notes-rss"
  	 :publishing-directory "/ssh:suah.dev:/var/www/suah.dev/p/"
  	 :publishing-function org-rss-publish-to-rss
  	 :recursive t
  	 :rss-extension "xml"
  	 :section-numbers nil
  	 :exclude ".*"
  	 :include ("index.org")
  	 :table-of-contents nil
  	 :base-directory "~/org/notes")
  	("recipes"
  	 :auto-preamble t
  	 :auto-sitemap t
  	 :headline-levels 4
  	 :publishing-directory "/ssh:suah.dev:/var/www/suah.dev/recipes/"
  	 :publishing-function org-html-publish-to-html
  	 :recursive t
  	 :section-numbers nil
  	 :html-head "<link rel=\"stylesheet\" href=\"https://suah.dev/p/css/stylesheet.css\" type=\"text/css\" />"
  	 :html-link-home "http://suah.dev/recipes/"
  	 :html-link-up "../"
  	 :style-include-default nil
  	 :sitemap-filename "index.org"
  	 :sitemap-title "Recipes"
  	 :with-title t
  	 :author-info nil
  	 :creator-info nil
  	 :base-directory "~/org/recipes")
  	("bolddaemon-web"
  	 :auto-preamble t
  	 :auto-sitemap t
  	 :headline-levels 4
  	 :publishing-directory "/ssh:suah.dev:/var/www/bolddaemon.com/"
  	 :publishing-function org-html-publish-to-html
  	 :recursive t
  	 :section-numbers nil
  	 :html-link-home "http://bolddaemon.com"
  	 :html-link-up "../"
  	 :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\" />"
  	 :style-include-default nil
  	 :with-title t
  	 :author-info nil
  	 :creator-info nil
  	 :base-directory "~/org/bold.daemon")
  	("bolddaemon-static"
  	 :base-directory "~/org/bold.daemon"
  	 :publishing-directory "/ssh:suah.dev:/var/www/bolddaemon.com/"
  	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg"
  	 :recursive t
  	 :publishing-function org-publish-attachment)
  	))
#+end_src

** Capture templates
:PROPERTIES:
:ID:       da112c38-c9c6-4579-ba42-8ea6dc4ce0b7
:END:

#+begin_src emacs-lisp
  (setq my-org-capture-templates
        `(("t" "TODO"
  	 entry (file+headline "~/org/todo.org" "TODOs")
  	 ,(concat
  	   "* TODO %?\n"
  	   ":PROPERTIES:\n"
  	   ":LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)\n"
  	   ":END:\n") :prepend t)
  	("f" "TODO with File"
  	 entry (file+headline "~/org/todo.org" "TODOs")
  	 ,(concat
  	   "* TODO %?\n"
  	   ":PROPERTIES:\n"
  	   ":LOGGING: TODO(!) WAIT(!) DONE(!) CANCELED(!)\n"
  	   ":END:\n"
  	   "%i\n  %a") :prepend t)
  	("b" "Bug"
  	 entry (file+olp+datetree "~/org/bugs.org" "Bugs")
  	 "* BUG %?\nEntered on %U\n  :PROPERTIES:\n  :FILE: %a\n  :END:\n" :prepend t)
  	("p" "Protocol"
  	 entry (file+headline "~/org/links.org" "Links")
  	 "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?")
  	("L" "Protocol Link" entry (file+headline "~/org/links.org" "Links")
  	 "* %? %:link\n%:description\n")
  	("j" "Journal"
  	 entry (file+olp+datetree "~/org/journal.org")
  	 "* %?\nEntered on %U\n  %i\n")
  	("P" "Process Soon" entry (file+headline "~/org/todo.org" "TODOs")
  	 "* TODO %:fromname: %a %?\nDEADLINE: %(org-insert-time-stamp (org-read-date nil t \"+2d\"))")))
#+end_src

** org
:PROPERTIES:
:ID:       8ca36457-ab66-4ffc-bd18-903efcc63f1a
:END:

#+begin_src emacs-lisp
  (use-package org
    :hook
    (org-mode . (lambda ()
                  (turn-on-flyspell)
                  (auto-revert-mode)
                  (auto-fill-mode 1)))
    :bind
    ("C-c c" . org-capture)
    ("C-c p" . org-publish)
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c b" . org-iswitchb)
    :config
    (load-library "find-lisp")
    (setq org-directory "~/org"
          org-agenda-files (find-lisp-find-files "~/org" "\.org$")
          org-startup-indented t
          org-log-done 'time
          org-export-with-sub-superscripts nil
          org-html-inline-images t
          org-log-into-drawer t
          org-src-tab-acts-natively t
          org-agenda-skip-scheduled-if-deadline-is-shown t
          org-todo-keywords '((sequence "TODO(t)" "|" "DONE(d)")
                              (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")
                              (sequence "|" "CANCELED(c)")))
    (setq org-publish-project-alist my-org-publish-alist)
    (setq org-capture-templates my-org-capture-templates)
    (add-hook 'org-mode-hook (lambda ()
  			     (add-hook 'before-save-hook 'xin/org-add-ids nil 'local))))
  (use-package org-contrib)
  (use-package ox-rss)
#+end_src

*** Extra bits
:PROPERTIES:
:ID:       98e84516-59ad-4441-b541-baa174ffdf24
:END:
#+begin_src emacs-lisp
(use-package org-journal
  :defer t
  :config
  (setq org-journal-dir "~/org/journal/"
	org-journal-file-format "%Y/%m-%d"
	org-journal-date-format "%A, %d %B %Y"))
#+end_src

Add in some org-mode helpers:

- ~org-habit~ lets me keep track of TODOs and other things.
- ~org-checklist~ lets me reset checklists for reoccurring tasks.
  - This requires one to ~pkg_add a2ps~.
  - ~RESET_CHECK_BOXES~ property to be set to ~t~ on a task
    headline. properties can be set via ~C-c C-x d~
#+begin_src emacs-lisp
  (require 'org-habit)
  (require 'org-checklist)
#+end_src

Custom agenda commands for various things.

- ~Daily habits~ shows how well I am keeping track of daily things.
#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("h" "Daily habits"
	 ((agenda ""))
	 ((org-agenda-show-log t)
	  (org-agenda-ndays 7)
	  (org-agenda-log-mode-items '(state))))))
#+end_src

**** org-roam
:PROPERTIES:
:ID:       6af98b92-9562-46ac-8f14-0a5792ebb620
:END:

It took me a few tries to get used to using org-roam. I think I was over
complicating using it.

#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :custom
    (org-roam-directory (file-truename "~/org-roam/"))
    (org-roam-capture-templates
     '(("d" "default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n")
        :unnarrowed t)
       ("b" "book" plain
        "- Author: /%^{Author}/\n- Year: /%^{Year}/\n\n* Highlights / Notes\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n#+filetags: :Book:\n")
        :unnarrowed t)
       ))
    :bind (("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n g" . org-roam-graph)
  	 ("C-c n r" . org-roam-ref-add)
  	 ("C-c n s" . org-roam-db-sync)
  	 ("C-c n t" . org-roam-tag-add)
  	 ("C-c n i" . org-roam-node-insert)
  	 ("C-c n c" . org-roam-capture)
  	 ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-enable)
    (setq org-roam-completion-everywhere t)
    (setq org-roam-node-display-template
  	(concat "${title:40} "
  		(propertize "${tags:40}" 'face 'org-tag)
  		"${file}"))
    (require 'org-roam-protocol))
#+end_src

Extending org with the ability to transclude makes for a powerhouse!
#+begin_src emacs-lisp
  (use-package org-transclusion
    :after org
    :config
    (setq org-transclusion-exclude-elements '(keyword property-drawer)))
#+end_src


#+begin_src emacs-lisp
  (use-package request)
  ;; (use-package org-social)
#+end_src
* RSS
:PROPERTIES:
:ID:       842027db-4e8a-4d9b-80c9-b8fb7825a078
:END:

#+begin_src emacs-lisp
  (use-package elfeed)
  (use-package elfeed-protocol
    :after elfeed
    :config
    (setq elfeed-protocol-feeds '(("fever+https://qbit@rss.bolddaemon.com"
  				 :password (auth-info-password
  					    (nth 0 (auth-source-search :max 1 :host "rss.bolddaemon.com" :require '(:secret))))
  				 :api-url "https://rss.bolddaemon.com/fever/")))
    (setq elfeed-protocol-enabled-protocols '(fever))
    (elfeed-protocol-enable)
    (defun xin/elfeed-update-feeds ()
      (interactive)
      (elfeed-protocol-fever-reinit "https://qbit@rss.bolddaemon.com")
      (elfeed-update))
    (define-key elfeed-search-mode-map (kbd "U") 'xin/elfeed-update-feeds))
#+end_src

* Mail
:PROPERTIES:
:ID:       428ef069-6c97-4fb9-83c2-f5f2bcea69c5
:END:

** gnus
:PROPERTIES:
:ID:       01bfd3e1-9b66-43e0-806a-850cf14e791d
:END:

[2024-08-22 Thu] Might need to switch go gnus. mu4e has been not showing new
mail for some things and having to sync state between two sources is a pita.

#+begin_src emacs-lisp
  (setq gnus-use-cache t
        gnus-use-full-window nil
        gnus-suppress-duplicates t
        gnus-inhibit-startup-message t
        gnus-asynchronous t
        gnus-sum-thread-tree-false-root ""
        gnus-sum-thread-tree-indent " "
        gnus-sum-thread-tree-leaf-with-other "├► "
        gnus-sum-thread-tree-root ""
        gnus-sum-thread-tree-single-leaf "╰► "
        gnus-sum-thread-tree-vertical "│"
        gnus-summary-line-format "%U%R%z %(%&user-date>;  %-15,15f  %B%s%)\n"
        gnus-summary-thread-gathering-function 'gnus-gather-threads-by-references
        gnus-thread-sort-functions '(gnus-thread-sort-by-date)
        gnus-user-date-format-alist '((t . "%Y-%m-%d %H:%M"))
        gnus-select-method '(nntp "news.gmane.io"))
#+end_src

* mu4e
:PROPERTIES:
:ID:       eb029614-075a-4f8d-8f64-583667bbaccc
:END:
~mu~ has been the best mail client for me on emacs.
** Initializing mu
:PROPERTIES:
:ID:       1d7e1d28-0577-47c2-b066-486ec34c1051
:END:
The defaults ~mu~ uses make no sense. ~~/.cache~ is for .. caching data, not
persistent databases.. So we init things with sane defaults:
#+begin_src shell
mu init --muhome=/home/qbit/.mu -m /home/qbit/Maildir/fastmail/ --my-address="aaron@bolddaemon.com"
#+end_src

** OpenBSD specific bits
:PROPERTIES:
:ID:       f9677956-15c6-42e9-aa62-524ea043a90e
:END:

#+begin_src emacs-lisp
    (if (file-exists-p "/usr/local/share/emacs/site-lisp/mu4e/mu4e.el")
        (load "/usr/local/share/emacs/site-lisp/mu4e/mu4e.el"))
#+end_src

** mu4e specific configs
:PROPERTIES:
:ID:       92d0499c-592e-4992-b67a-d1c8646e2b6b
:END:
#+begin_src emacs-lisp
  (use-package mu4e
    :init
    (setq mail-user-agent 'mu4e-user-agent
          read-mail-command 'mu4e
  	mu4e-maildir "~/Maildir"
          mu4e-get-mail-command "mbsync -a"
  	mu4e-change-filenames-when-moving t
          mu4e-update-interval 420
          mu4e-compose-context-policy nil
          mu4e-context-policy 'pick-first
          mu4e-drafts-folder "/Drafts"
          mu4e-sent-folder   "/Sent Items"
          mu4e-trash-folder  "/Trash"
          mu4e-maildir-shortcuts
          '( ("/fastmail/Inbox"        . ?i)
             ("/fastmail/Archive"      . ?a)
             ("/segfault/Inbox"        . ?s))
          org-mu4e-link-query-in-headers-mode nil
          mu4e-attachment-dir
          (lambda (fname mtype)
            (cond
             ((and fname (string-match "\\.diff$" fname))  "~/patches")
             ((and fname (string-match "\\.patch$" fname))  "~/patches")
             ((and fname (string-match "\\.diff.gz$" fname))  "~/patches")
             (t "~/Downloads")))
  	mu4e-contexts (list
  		       (make-mu4e-context
  			:name "Fastmail"
  			:match-func
  			(lambda (msg)
  			  (when msg
  			    (string-prefix-p "/fastmail" (mu4e-message-field msg :maildir))))
  			:vars '((user-mail-address   . "aaron@bolddaemon.com")
  				(mu4e-drafts-folder . "/fastmail/Drafts")
  				(mu4e-sent-folder   . "/fastmail/Sent Items")
  				(mu4e-refile-foldir . "/fastmail/Archive")))
  		       (make-mu4e-context
  			:name "Segfault"
  			:match-func
  			(lambda (msg)
  			  (when msg
  			    (string-prefix-p "/segfault" (mu4e-message-field msg :maildir))))
  			:vars '((user-mail-address   . "qbit@segfault.rodeo")
  				(mu4e-drafts-folder . "/segfault/Drafts")
  				(mu4e-sent-folder   . "/segfault/Sent")
  				(mu4e-refile-folder . "/segfault/Archive"))))

          mu4e-bookmarks `(( :name "Fastmail Inbox"
  			   :query "maildir:/fastmail/Inbox AND NOT flag:trashed"
  			   :key ?f)
  			 ( :name "Segfault Inbox"
  			   :query "maildir:/segfault/Inbox AND NOT flag:trashed"
  			   :key ?s)
  			 ( :name "TODO"
  			   :query "maildir:/fastmail/TODO AND NOT flag:trashed"
  			   :key ?T)
  			 ( :name  "Unread messages"
  			   :query "flag:unread AND NOT flag:trashed AND NOT list:ports-changes.openbsd.org AND NOT list:source-changes.openbsd.org"
  			   :key ?u)
  			 ( :name  "Today's messages"
  			   :query "date:today..now"
  			   :key ?d)
  			 ( :name  "Last 7 days"
  			   :query "date:6d..now AND NOT flag:trashed AND NOT list:ports-changes.openbsd.org AND NOT list:source-changes.openbsd.org"
  			   :key ?w)
  			 ( :name  "Hackers"
  			   :query "list:hackers.openbsd.org AND NOT flag:trashed"
  			   :key ?h)
  			 ( :name   "Bugs"
  			   :query  "list:bugs.openbsd.org AND NOT flag:trashed"
  			   :key ?b)
  			 ( :name  "Tech"
  			   :query "list:tech.openbsd.org AND NOT flag:trashed"
  			   :key ?t)
  			 ( :name  "Ports"
  			   :query "list:ports.openbsd.org AND NOT flag:trashed"
  			   :key ?p)
  			 ( :name "Misc"
  			   :query "list:misc.openbsd.org AND NOT flag:trashed"
  			   :key ?m)
  			 ( :name "9front"
  			   :query "list:9front.9front.org AND NOT flag:trashed"
  			   :key ?9)
  			 ( :name "GOT"
  			   :query "list:gameoftrees.openbsd.org AND NOT flag:trashed"
  			   :key ?g))))
  (add-to-list 'display-buffer-alist
               `(,(regexp-quote mu4e-main-buffer-name)
                 display-buffer-same-window))
  (define-key mu4e-headers-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
  (define-key mu4e-view-mode-map    (kbd "C-c c") 'mu4e-org-store-and-capture)
#+end_src

** SMTP
:PROPERTIES:
:ID:       5b48d1b9-2fcd-475c-a9c8-51e4fcc5f454
:END:

#+begin_src emacs-lisp
  (require 'smtpmail)
  (setq user-mail-address              "aaron@bolddaemon.com"
        user-full-name                 "Aaron Bieber"
        message-send-mail-function     'smtpmail-send-it
        message-kill-buffer-on-exit    t
        smtpmail-smtp-user             "qbit@fastmail.com"
        smtpmail-smtp-server           "smtp.fastmail.com"
        smtpmail-smtp-service          465
        smtpmail-default-smtp-server   "smtp.fastmail.com"
        smtpmail-stream-type           'ssl)
#+end_src

* Chat
:PROPERTIES:
:ID:       056f6b1e-0174-49c7-97ae-3e691a077a4c
:END:

** IRC
:PROPERTIES:
:ID:       088a5a76-c22e-419b-a6b5-f514f6e2ddc5
:END:

#+begin_src emacs-lisp
  (setq
   rcirc-fill-column 'frame-width
   rcirc-default-nick "qbit"
   rcirc-default-port 6697
   rcirc-default-full-name "Qbit"
   rcirc-reconnect-delay 10
   rcirc-reconnect-attempts 5
   rcirc-server-alist
   '(("bounce.bold.daemon"
      :server-alias "bTyrfingr"
      :encryption tls
      :user-name "qbit@rcirc.europa/Tyrfingr")
     ("bounce.bold.daemon"
      :server-alias "bLibera"
      :encryption tls
      :user-name "qbit@rcirc.europa/Libera")
     ("bounce.bold.daemon"
      :server-alias "bOFTC"
      :encryption tls
      :channels ("#cat-v")
      :user-name "qbit@rcirc.europa/OFTC")
     ("bounce.bold.daemon"
      :server-alias "bHackers"
      :nick "abieber"
      :encryption tls
      :user-name "qbit@rcirc.europa/hackers")
     ("bounce.bold.daemon"
      :server-alias "bPorters"
      :nick "abieber"
      :encryption tls
      :user-name "qbit@rcirc.europa/porters")))
  (add-hook 'rcirc-mode-hook #'rcirc-track-minor-mode)
  (add-hook 'rcirc-mode-hook #'flyspell-mode)
  (setopt
   rcirc-omit-responses '("JOIN" "PART" "QUIT" "NICK" "AWAY")
   rcirc-bridge-bot-alist
   '(("tapebot" . "<\\(.+?\\)>[[:space:]]+")
     ("ijchain" . "<\\(.+?\\)>[[:space:]]+")
     ("matrix_bridge" . "<\\(.+?\\)>[[:space:]]+")
     ("ischain" . "<\\(.+?\\)>[[:space:]]+")))
  (add-to-list 'display-buffer-alist
  	     '((major-mode . rcirc-mode) display-buffer-same-window))
#+end_src

* Experiments
:PROPERTIES:
:ID:       99dc81c2-b0bc-4aa0-99c3-4ea32cb2e6fe
:END:

#+begin_src emacs-lisp
  (use-package guix)
#+end_src
